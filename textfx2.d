module textfx2;import std.string;import std.algorithm;import std.array;import std.conv;import std.range;import std.regex;import scintilla;import nppplugin;static this() {    plugin = new TextFx2();}class TextFx2 : NppPlugin {    override void commandMenuInit() {    /*        functions = [            FuncItem("U&pper case", &upperCase, 0, false, null),            FuncItem("&Lower case", &lowerCase, 0, false, null),            FuncItem("---", null, 0, false, null),            FuncItem("&Find matching {}", &findMatchingCurlyBrace, 0, false, null),            FuncItem("F&ind matching ()", &findMatchingParentheses, 0, false, null),            FuncItem("Fi&nd matching []", &findMatchingSquareBracket, 0, false, null),            FuncItem("&Delete matching {}", &deleteMatchingCurlyBrace, 0, false, null),            FuncItem("D&elete matching ()", &deleteMatchingParentheses, 0, false, null),            FuncItem("Delete m&atching []", &deleteMatchingSquareBracket, 0, false, null),            FuncItem("----", null, 0, false, null),            FuncItem("Delete &blank lines", &deleteBlankLines, 0, false, new ShortcutKey(true, false, true, 'D')),            FuncItem("Delete surplus blan&k lines", &deleteSurplusBlankLines, 0, false, new ShortcutKey(true, true, false, 'D')),            FuncItem("---", null, 0, false, null),            FuncItem("&Sort case sensitive", &sortCaseSensitive, 0, false, null),            FuncItem("S&ort case insensitive", &sortCaseInsensitive, 0, false, null),            FuncItem("&Reverse lines", &reverseLines, 0, false, null),            FuncItem("&Unique case sensitive", &uniqueCaseSensitive, 0, false, null),            FuncItem("Uni&que case insensitive", &uniqueCaseInsensitive, 0, false, null),            ];*/    }}extern(C) {void dummy() {}void upperCase() {    plugin.activeText = plugin.activeText.toUpper;}void lowerCase() {    plugin.activeText = plugin.activeText.toLower;}void findMatchingCurlyBrace() {}void findMatchingParentheses() {}void findMatchingSquareBracket() {}void deleteMatchingCurlyBrace() {}void deleteMatchingParentheses() {}void deleteMatchingSquareBracket() {}void deleteBlankLines() {    auto a = ctRegex!(`(\n|(?:\r\n)|\r){2,}`, "g");    plugin.activeText = plugin.activeText.replace(a, "$1");}void deleteSurplusBlankLines() {    auto a = ctRegex!(`(\n|(?:\r\n)|\r){3,}`, "g");    plugin.activeText = plugin.activeText.replace(a, "$1$1");}void sortCaseSensitive() {    plugin.activeText = plugin.activeText.splitLines.sort.join("\n");}void sortCaseInsensitive() {    plugin.activeText = plugin.activeText.splitLines.sort!((a,b)=>a.toUpper < b.toUpper).join("\n");}void reverseLines() {    plugin.activeText = plugin.activeText.splitLines.retro.join("\n");}void uniqueCaseSensitive() {    plugin.activeText = plugin.activeText.splitLines.uniq.join("\n");}void uniqueCaseInsensitive() {    plugin.activeText = plugin.activeText.splitLines.uniq!((a,b)=>a.toUpper < b.toUpper).join("\n");}}